<definitions id="definitions"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.omg.org/spec/BPMN/20100524/MODEL
             http://www.omg.org/spec/BPMN/2.0/20100501/BPMN20.xsd
             http://activiti.org/bpmn
             file://activiti-bpmn-extensions-5.18.xsd"
             xmlns:activiti="http://activiti.org/bpmn"
             xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
             targetNamespace="http://activiti.org/bpmn20">

    <process id="SimpleCamelCallProcess" name="Simple Camel Call">
        <documentation>
            Calling a camel route, sending a message to ActiveMQ, and a queue consumer
            logging the received message. The message must contain the necessary headers/information about
            the Activiti process.
        </documentation>
        <startEvent id="startevent1" name="Start"/>

        <!-- AddExecutionVariables is not needed anymore, as the CamelBehaviorCamelJsonBodyImpl does that for us -->
        <!--<serviceTask id="serviceTask1" name="AddExecutionVariables" activiti:class="com.github.dnvriend.task.AddExecutionVariables">-->
            <!--<documentation>-->
                <!--Adds Activiti process specific information to the process instance variables so that the-->
                <!--activiti component can add them to the Camel exchange when the Activiti Camel component's-->
                <!--settings 'copyVariablesToBodyAsMap=true' and 'copyVariablesToProperties=true' have been set.-->
                <!--The variables will be set to the body, as a Map and to the properties of the exchange.-->
            <!--</documentation>-->
        <!--</serviceTask>-->

        <serviceTask id="simpleCall" name="Calling CamelRoute" activiti:type="camel">
            <documentation>
                The Camel task allows to send messages to and receive messages from Camel.
                The Camel task is implemented as a Service Task and is defined by setting 'camel'
                for the type of the service task.

                The Activiti Engine looks for a camelContext bean in the Spring container.
                The camelContext bean defines the Camel routes that will be loaded by the Camel
                container.

                The integration logic is all delegated to the Camel container, this has the advantage
                that Activiti does not have to know anything about integration.

                Activiti simply activates a specific Camel Route that can be identified by the
                Activiti process id='SimpleCamelCallProcess' appended with
                the Activiti task id='simpleCall'. In the CamelRoute the 'from' component
                has the following format: 'from("activiti:SimpleCamelCallProcess:simpleCall")'

                Notice the format of the from endpoint. It is consisted of three parts:
                1. activiti              : refers to Activiti endpoint
                2. SimpleCamelCallProcess: name of the process
                3. simpleCall            : name of the Camel service in the process

                For more information read the *whole* section, from top to bottom about the
                CamelTask here: http://activiti.org/userguide/index.html#bpmnCamelTask
            </documentation>
            <extensionElements>
                <activiti:field name="camelBehaviorClass" stringValue="com.github.dnvriend.activiti.CamelBehaviorCamelJsonBodyImpl" />
            </extensionElements>
        </serviceTask>
        <endEvent id="endevent1" name="End"/>
        <sequenceFlow id="sequenceflow1" sourceRef="startevent1" targetRef="simpleCall"/>
        <!--<sequenceFlow id="sequenceflow2" sourceRef="serviceTask1" targetRef="simpleCall"/>-->
        <sequenceFlow id="sequenceflow3" sourceRef="simpleCall" targetRef="endevent1"/>
    </process>

</definitions>